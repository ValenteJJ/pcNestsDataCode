---
title: "scriptForManuscript"
format: html
editor: visual
---

## Importing data and loading R packages

```{r}


rm(list=ls())

require(groundhog)

groundhog.library(unmarked, '2025-04-01')
groundhog.library(terrainr, '2025-04-01')
groundhog.library(tidyterra, '2025-04-01')
groundhog.library(cowplot, '2025-04-01')
groundhog.library(ggnewscale, '2025-04-01')
groundhog.library(ggspatial, '2025-04-01')
groundhog.library(sf, '2025-04-01')
groundhog.library(tigris, '2025-04-01')
groundhog.library(terra, '2025-04-01')
groundhog.library(FedData, '2025-04-01')
groundhog.library(tidyverse, '2025-04-01')
groundhog.library(spAbundance, '2025-04-01')


plots = st_read('plots.shp')
pcLocations = read.csv("pcLocations.csv")
surveys = read.csv('surveys.csv')
nests = read.csv('nests.csv')


```

## Section 2.1 \| Study area

This code chunk creates a forest cover layer based on the NLCD dataset. It takes a little while to run, so we export it as its own forest cover raster and bring it in from file instead of doing the raster processing each time.

```{r}
# croppedNLCD = get_nlcd(studyArea,
#                        label=countyName,
#                        year = nlcdYear,
#                        dataset = "landcover",
#                        landmass = landMass,
#                        extraction.dir = file.path(directoryForStorage, "FedData", "extractions", "nlcd"),
#                        raster.options = c("COMPRESS=DEFLATE", "ZLEVEL=9"),
#                        force.redo = TRUE
# )
# 
# # tmp = st_transform(studyArea, crs(croppedNLCD))
# # plot(croppedNLCD)
# # plot(tmp, add=T, col='red')
# 
# reclassifyValues = matrix(c(11, 0,
#                             12, 0,
#                             21, 0,
#                             22, 0,
#                             23, 0,
#                             24, 0,
#                             31, 0,
#                             41, 1,
#                             42, 1,
#                             43, 1,
#                             51, 0,
#                             52, 0,
#                             71, 0,
#                             72, 0,
#                             73, 0,
#                             74, 0,
#                             81, 0,
#                             82, 0,
#                             90, 0,
#                             95, 0), ncol=2, byrow=T)
# 
# forest = classify(croppedNLCD, rcl=reclassifyValues)
# forest = project(forest, crs(studyArea))
# tmp = data.frame('ID' = c(0, 1), 'category' = c('Non-forest', 'Forest'))
# forest = categories(forest, value=tmp)
# 
# writeRaster(forest, 'forestCover.tif', overwrite=T)

forest = rast('forestCover.tif')
forest = categories(forest, value=data.frame('ID' = c(0, 1), 'category' = c('Non-forest', 'Forest')))
```

We are creating a multi-part figure. This creates the state-level map.

```{r}

studyArea = st_bbox(plots) + c(-10000, -10000, 10000, 10000)
studyArea = st_sf(st_as_sfc(studyArea))

indiana = states(resolution='5m') %>% 
  filter(NAME=='Indiana') %>% 
  st_transform(st_crs(studyArea))

indianaCropped = st_intersection(indiana, studyArea)

plotState = ggplot()+
  geom_sf(data = indiana)+
  geom_sf(data = studyArea, fill=NA, color='red')+
  theme_bw()+
  theme(panel.grid=element_blank(),
        axis.text=element_blank(),
        axis.ticks=element_blank(),
        panel.border=element_blank())

plotState

```

This next chunk creates the regional map showing the locations of the 12 plots.

```{r}
indianaCropped = st_transform(indianaCropped, crs(forest))
forest = mask(forest, indianaCropped)
forest = crop(forest, indianaCropped)

plotLocs = st_centroid(plots)
plotLocs = st_transform(plotLocs, crs(forest))
plotLocs$plot = 'Demographic plot'

plotRegion = ggplot()+
  geom_sf(data=indianaCropped, color='black')+
  tidyterra::geom_spatraster(data=forest)+
  scale_fill_manual(values=c('Forest' = 'darkolivegreen', 'Non-forest'='lightgray'), na.value='white', name='', na.translate=F)+
  scale_y_continuous(expand=c(0,0))+
  scale_x_continuous(expand=c(0,0))+
  xlab('Longitude')+
  ylab('Latitude')+
  theme(panel.background=element_rect(fill='white'))+
  theme(panel.grid=element_blank())+
  geom_sf(data=plotLocs, aes(pch=plot), fill='orange', size=3)+
  scale_shape_manual(values=24, name='')+
  theme(legend.position='none')

plotRegion


```

The next chunk zooms in on one specific plot to show the locations of point count stations. The imagery was captured in 2014 as part of the National Agriculture Inventory Program which is administered by the U.S. Department of Agriculture's Farm Production and Conservation Business Center Geospatial Enterprise Operations Branch.

```{r}
area58 = plots %>% 
  filter(plot=='Area 58' & year==2011)

area58Broad = st_bbox(area58)
area58Broad = area58Broad + c(-200, -200, 200, 200)
area58Broad = st_sf(st_as_sfc(area58Broad))

mapImage = rast('area58Imagery.tif')
names(mapImage) = c('lyr1', 'lyr2', 'lyr3', 'lyr4')
fortMapImage = fortify(mapImage)

pc58 = pcLocations %>% 
  st_as_sf(coords=c('utmX', 'utmY'), crs=crs(plotLocs)) %>% 
  filter(plot=='Area 58') %>% 
  st_transform(crs(mapImage))


plotArea58 = ggplot()+
    geom_spatial_rgb(data=fortMapImage, aes(x=x, y=y, r=lyr1, g=lyr2, b=lyr3))+
  scale_y_continuous(expand=c(0,0))+
  scale_x_continuous(expand=c(0,0))+
  geom_sf(data=area58, color='orange', linewidth=2, fill=NA)+
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title=element_blank())+
  geom_sf(data=pc58, size=2, color='yellow')+
  annotation_scale(location='br', bar_cols=c('gray', 'white'), text_col='white', width_hint=0.5)+
  theme(legend.position='none')

plotArea58
```

And now we'll zoom in on a specific point count station.

```{r}


point = pc58[1,]
areaPoint = st_bbox(point) + c(-150, -150, 150, 150)
areaPoint = st_sf(st_as_sfc(areaPoint))

pointBuff = st_buffer(point, 100)

pointImage = crop(mapImage, areaPoint)
fortPointImage = fortify(pointImage)

nestsSpatial = st_as_sf(nests, coords=c('GPS.E', 'GPS.N'), crs=26916) %>% 
  st_transform(crs(pointImage)) %>% 
  st_intersection(areaPoint) %>% 
  mutate(year = as.factor(as.character(year))) %>% 
  filter(year=='2011')



plotPoint = ggplot()+
    geom_spatial_rgb(data=fortPointImage, aes(x=x, y=y, r=lyr1, g=lyr2, b=lyr3))+
  scale_y_continuous(expand=c(0,0))+
  scale_x_continuous(expand=c(0,0))+
  geom_sf(data=pointBuff, color='yellow', linewidth=2, fill=NA)+
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title=element_blank())+
  geom_sf(data=point, size=2, color='yellow')+
  geom_sf(data=nestsSpatial, color='bisque2', pch=4, size=3, stroke=2)+
  annotation_scale(location='br', bar_cols=c('gray', 'white'), text_col='white', width_hint=0.5)+
  theme(legend.position='none')

plotPoint
```

## Section 2.2 \| Nest surveys

```{r}
plots %>% 
  filter(year==2011) %>% 
  summarise(mean = mean(hectares),
            sd = sd(hectares),
            min = min(hectares),
            max = max(hectares))

plots %>% 
  filter(year==2012) %>% 
  summarise(mean = mean(hectares),
            sd = sd(hectares),
            min = min(hectares),
            max = max(hectares))
```

## Section 2.3 \| Point count surveys

```{r}
#| echo: false

pcLocations = read.csv("pcLocations.csv")
surveys = read.csv('surveys.csv')

#Survey dates
pcSampleDates = pcLocations %>% 
  left_join(surveys, by='point') %>% 
  group_by(year, plot) %>% 
  summarise(startDate = min(date),
            endDate = max(date))

#Surveys per year per point
pcLocations %>% 
  left_join(surveys, by='point') %>% 
  group_by(year, point) %>% 
  summarise(count = n())

#Points per plot per year
pcLocations %>% 
  left_join(surveys, by='point') %>% 
  select(year, point, plot) %>% 
  unique() %>% 
  group_by(year, plot) %>% 
  summarise(count = n()) %>% 
  ungroup() %>% 
  arrange(plot, year) %>% 
  pivot_wider(names_from=year, values_from=count)
```

## Section 2.4 \| Spatial and temporal filtering of nest data

```{r}

nestsSpatial = st_as_sf(nests, coords=c('GPS.E', 'GPS.N'), crs=26916) 

#Retaining only nests on the plots in each year
usableNests = nestsSpatial[-c(1:nrow(nestsSpatial)),]

for(i in 2011:2014){
  tmpNests = nestsSpatial %>% filter(year==i)
  tmpPlot = plots %>% filter(year==i)
  usableNests = rbind(usableNests, st_intersection(tmpNests, tmpPlot))
}


#Retain only nests that were active during point counts
usableNests = usableNests %>% 
  mutate(clutchCompletion = yday(as.Date(clutch.completion, format='%m/%d/%Y'))) %>% 
  mutate(clutchInitiation = clutchCompletion - (eggs + BHCO.eggs)) %>% 
  mutate(fledgefail = yday(as.Date(fledgefail, format='%m/%d/%Y'))) %>% 
  left_join(pcSampleDates, by=c('year', 'plot')) %>% 
  mutate(startDate = yday(as.Date(startDate, format='%Y-%m-%d')),
         endDate = yday(as.Date(endDate, format='%Y-%m-%d'))) %>% 
  filter(clutchInitiation <= endDate & fledgefail >= startDate)



```
